#!/usr/bin/python

import os, sys, getopt, json

################################################################################
# start of functions
################################################################################

###
# process the GET request
# @param  {Object} json_data
# @return          the string need to be written to the file
def process_get(json_data):
	result = ''

	action = json_data['action']
	query = []
	for key, value in json_data['parameter'].iteritems():
		query.append(key + '=' + value)

	result += 'browser.get("'
	result += action + '?' + '&'.join(query)
	result += '")\n'
	return result

###
# process the POST request
# @param  {Object} json_data
# @return          the string need to be written to the file
def process_post(json_data):

	def execute_script(js_code_string):
		return 'browser.execute_script("""\n' + js_code_string + '\n""")\n'

	result = ''
	# create a form element
	result += 'var form = document.createElement("form");\n'
	result += 'form.setAttribute("method", "POST");\n'
	result += 'form.setAttribute("action", "' + json_data['action'] + '");\n'
	# create and append each field of the form
	result += 'var field;\n'
	for key, value in json_data['parameter'].iteritems():
		result += 'field = document.createElement("input");\n'
		result += 'field.setAttribute("name", "' + key + '");\n'
		result += 'field.setAttribute("value", "' + value + '");\n'
		result += 'form.appendChild(field);\n'
	# submit the form
	result += 'document.body.appendChild(form);\n'
	result += 'form.submit();'

	return execute_script(result)

###
# generate the exploit scripts
# @param  {String} file_path
# @param  {Object} json_config
# @param  {Object} json_data
# @return          the string need to be written to the file
def generate_exploit_script(file_path, json_config, json_data):
	file = open(file_path, 'w')

	file.write('from selenium import webdriver\n\n')

	file.write('browser = webdriver.Firefox()\n\n')

	# login first
	file.write('browser.get("' + json_config['login_url'] + '")\n')
	file.write('print browser.title\n\n')

	file.write('username = browser.find_element_by_name("username")\n')
	file.write('username.send_keys("' + json_config['username'] + '")\n')
	file.write('password = browser.find_element_by_name("password")\n')
	file.write('password.send_keys("' + json_config['password'] + '")\n')
	file.write('password.submit()\n\n')

	# perform attack operation
	if json_data['method'].lower() == 'get':
		# print 'Process GET'
		file.write(process_get(json_data))
	elif json_data['method'].lower() == 'post':
		# print 'Process POST'
		file.write(process_post(json_data))
	else:
		print 'Unknown action: ' + json_data['method']
		file.close()
		os.remove(file_path)
		return False

	# file.write('browser.quit()')

	file.close()
	return True

def print_usage():
	print 'generate_exploit.py -c <config file path> -i <input file path> -o <output dir>'
	print '<config file path>: required'
	print '<input file path>: required'
	print '<output dir>: optional, default: ./out'

def main(argv):
	config_file_path = ''
	input_file = ''
	output_dir = ''

	try:
		opts, args = getopt.getopt(argv, 'hc:i:o:', ['config=', 'input=', 'output='])
	except getopt.GetoptError:
		print_usage()
		sys.exit(2)
	for opt, arg in opts:
		if opt == '-h':
			print_usage()
			sys.exit()
		elif opt in ('-c', '--config'):
			config_file_path = arg
		elif opt in ('-i', '--input'):
			input_file = arg
		elif opt in ('-o', '--output'):
			output_dir = arg

	if config_file_path == '':
		print_usage()
		sys.exit(2)

	if input_file == '':
		print_usage()
		sys.exit(2)

	if output_dir == '':
		output_dir = 'out'

	print 'The config file set to: ' + config_file_path
	print 'The input file set to: ' + input_file
	print 'The output dir set to: ' + output_dir

	# start generation
	if os.path.exists(output_dir):
		for file in os.listdir(output_dir):
			os.remove(output_dir + '/' + file)
			print 'Removed file: ' + output_dir + '/' + file
	else:
		os.makedirs(output_dir)

	# read config
	with open(config_file_path) as config_file:
		config = json.load(config_file)

	counter = 1
	with open(input_file) as data_file:
		data = json.load(data_file)

	for obj in data:
		file_name = 'exploit_script_' + `counter` + '.py'
		if generate_exploit_script(output_dir + '/' + file_name, config, obj):
			print 'Generated script: ' + output_dir + '/' + file_name
			counter += 1

################################################################################
# end of functions
################################################################################

if __name__ == '__main__':
	main(sys.argv[1:])
